/*
 NOTE: We aren't checking for any error conditions with fork.
*/

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>

union semun{
	int val;
	struct semid_ds *buf;
	unsigned short  *array;
	struct seminfo  *__buf;
};


int main()
{
	pid_t pid;
	int sem_id, ctr;
	union semun sem_un;
 	struct sembuf sem_b;

	sem_id = semget(123, 1, 0666|IPC_CREAT);

	sem_un.val = 1;
	semctl(sem_id, 0, SETVAL, sem_un);

	pid = fork();

	for(ctr=0; ctr<3; ctr++){
		sleep(rand()%3);

		sem_b.sem_num = 0;
		sem_b.sem_op = -1;
		sem_b.sem_flg = 0;
		semop(sem_id, &sem_b, 1);

		if(!pid)
			fprintf(stderr, "\tC-Entering\n");
		else
			fprintf(stderr, "P-Entering\n");

		sleep(rand()%3);

		if(!pid)
			fprintf(stderr, "\tC-Exiting\n");
		else
			fprintf(stderr, "P-Exiting\n");

		sem_b.sem_num = 0;
		sem_b.sem_op = 1;
		sem_b.sem_flg = 0;
		semop(sem_id, &sem_b, 1);

		sleep(rand()%3);
	}


	if(pid){
		wait(NULL);
		semctl(sem_id, 0, IPC_RMID);
	}

	return 0;
}
